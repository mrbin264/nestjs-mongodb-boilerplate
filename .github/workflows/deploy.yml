name: Deploy to Production

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8.15.0

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run tests
      run: |
        pnpm run test
        pnpm run test:e2e
      env:
        NODE_ENV: test
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        REDIS_URL: ${{ secrets.TEST_REDIS_URL }}

    - name: Build application
      run: pnpm run build

    - name: Configure SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

    - name: Deploy to staging server
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          cd /opt/boilerplate-api
          git pull origin main
          pnpm install --frozen-lockfile --prod
          pnpm run build
          sudo systemctl restart boilerplate-api
          sudo systemctl status boilerplate-api
        EOF

    - name: Health check
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_URL }}/api/v1/health || exit 1

    - name: Run smoke tests
      run: |
        # Add smoke tests here
        echo "Running smoke tests against staging..."

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    needs: deploy-staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8.15.0

    - name: Install dependencies
      run: pnpm install --frozen-lockfile

    - name: Run full test suite
      run: |
        pnpm run test
        pnpm run test:e2e
        pnpm run test:cov
      env:
        NODE_ENV: test
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
        REDIS_URL: ${{ secrets.TEST_REDIS_URL }}

    - name: Security audit
      run: pnpm audit --prod

    - name: Build application
      run: pnpm run build

    - name: Create deployment package
      run: |
        tar -czf deployment-${{ github.sha }}.tar.gz \
          dist/ \
          package.json \
          pnpm-lock.yaml \
          docker-compose.prod.yml \
          Dockerfile \
          scripts/

    - name: Upload deployment package
      uses: actions/upload-artifact@v3
      with:
        name: production-deployment-${{ github.sha }}
        path: deployment-${{ github.sha }}.tar.gz

    - name: Configure SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

    - name: Backup production database
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/boilerplate-api
          ./scripts/backup-database.sh production
        EOF

    - name: Deploy to production
      run: |
        scp -o StrictHostKeyChecking=no deployment-${{ github.sha }}.tar.gz \
          ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }}:/tmp/

        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/boilerplate-api
          
          # Create backup of current deployment
          sudo cp -r dist dist.backup.$(date +%Y%m%d_%H%M%S)
          
          # Extract new deployment
          tar -xzf /tmp/deployment-${{ github.sha }}.tar.gz
          
          # Install production dependencies
          pnpm install --frozen-lockfile --prod
          
          # Run database migrations if needed
          # pnpm run migration:run
          
          # Restart services with zero downtime
          docker-compose -f docker-compose.prod.yml up -d --no-deps --build app
          
          # Cleanup
          rm /tmp/deployment-${{ github.sha }}.tar.gz
        EOF

    - name: Health check and validation
      run: |
        echo "Waiting for application to start..."
        sleep 60
        
        # Health check
        if ! curl -f ${{ secrets.PRODUCTION_URL }}/api/v1/health; then
          echo "Health check failed, rolling back..."
          ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
            cd /opt/boilerplate-api
            # Rollback logic here
            exit 1
          EOF
        fi
        
        echo "Production deployment successful!"

    - name: Run production smoke tests
      run: |
        # Comprehensive production smoke tests
        echo "Running production smoke tests..."
        
        # Test authentication
        curl -X POST ${{ secrets.PRODUCTION_URL }}/api/v1/auth/login \
          -H "Content-Type: application/json" \
          -d '{"email":"test@example.com","password":"wrongpassword"}' | \
          grep -q "Invalid credentials"
        
        # Test rate limiting
        for i in {1..10}; do
          curl -s ${{ secrets.PRODUCTION_URL }}/api/v1/health > /dev/null
        done

    - name: Update production monitoring
      run: |
        # Update monitoring dashboards, alerts, etc.
        echo "Updating monitoring configuration..."

    - name: Create GitHub release
      if: startsWith(github.ref, 'refs/tags/v')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## Changes in this Release
          - Automated production deployment
          - Version: ${{ github.ref }}
          - Commit: ${{ github.sha }}
        draft: false
        prerelease: false

    - name: Notify production deployment
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#production-deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        fields: repo,message,commit,author,action,eventName,ref,workflow
        custom_payload: |
          {
            attachments: [{
              color: '${{ job.status }}' === 'success' ? 'good' : 'danger',
              blocks: [{
                type: 'section',
                text: {
                  type: 'mrkdwn',
                  text: `ðŸš€ *Production Deployment ${{ job.status }}*\n*Repository:* ${{ github.repository }}\n*Version:* ${{ github.ref }}\n*Commit:* ${{ github.sha }}\n*Author:* ${{ github.actor }}`
                }
              }]
            }]
          }

  rollback:
    name: Emergency Rollback
    runs-on: ubuntu-latest
    if: failure() && (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch')
    environment: production
    needs: deploy-production

    steps:
    - name: Configure SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

    - name: Rollback production deployment
      run: |
        ssh -o StrictHostKeyChecking=no ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          cd /opt/boilerplate-api
          
          echo "Starting emergency rollback..."
          
          # Find latest backup
          BACKUP_DIR=$(ls -td dist.backup.* | head -1)
          
          if [ -n "$BACKUP_DIR" ]; then
            echo "Rolling back to $BACKUP_DIR"
            rm -rf dist
            mv "$BACKUP_DIR" dist
            
            # Restart services
            docker-compose -f docker-compose.prod.yml restart app
            
            echo "Rollback completed"
          else
            echo "No backup found for rollback"
            exit 1
          fi
        EOF

    - name: Verify rollback
      run: |
        sleep 30
        curl -f ${{ secrets.PRODUCTION_URL }}/api/v1/health || exit 1
        echo "Rollback verification successful"

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#production-alerts'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        custom_payload: |
          {
            attachments: [{
              color: 'warning',
              blocks: [{
                type: 'section',
                text: {
                  type: 'mrkdwn',
                  text: `ðŸ”„ *Emergency Rollback Completed*\n*Repository:* ${{ github.repository }}\n*Failed Deployment:* ${{ github.sha }}\n*Status:* Production service restored to previous version`
                }
              }]
            }]
          }
